******About Ordered Set or Policy Based Ordered Set(PBDS)
   This is same as our normal ordered set/set but it provides two addition 
   features/function which are quite often required and it gives most optimised 
   form of that.

   1.Finding number of elements smaller than X in the set
         A.order_of_key(X)   ---> O(logN)
  
  2.Finding the element present at the Xth index in the set
         *A.find_by_order(X)  ----> O(logN)  (returns an interator,therefore * to derefrence)


  Link to the Codeforces Blog on PBDS: https://codeforces.com/blog/entry/11080

  If our header for pbds shows error the this is small fix for that.
  Go to the below path--->
  C:\MinGW\lib\gcc\mingw32\9.2.0\include\c++\ext\pb_ds\detail\resize_policy
  then here you will find all files with .hpp extension except one file.So
  basically rename that file by just removing extra numbers after .hpp and 
  thus all files shoild now have .hpp extension;

  
-------------------------------Code------------------------------------------
/* Priyansh Agarwal*/

#include<bits/stdc++.h>

#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds; // find_by_order, order_of_key

int main() {
	pbds A; // declaration

	// Inserting elements - 1st query
	A.insert(1);
	A.insert(10);
	A.insert(2);
	A.insert(7);
	A.insert(2);  // ordered set only contains unique values

	// A contains
	cout << "A = ";
	for (auto i : A)
		cout << i << " ";
	cout << endl;
	cout << endl;

	// finding kth element - 4th query
	cout << "0th element: " << *A.find_by_order(0) << endl;
	cout << "1st element: " << *A.find_by_order(1) << endl;
	cout << "2nd element: " << *A.find_by_order(2) << endl;
	cout << "3rd element: " << *A.find_by_order(3) << endl;
	cout << endl;

	// finding number of elements smaller than X - 3rd query
	cout << "No. of elems smaller than 6: " << A.order_of_key(6) << endl; // 2
	cout << "No. of elems smaller than 11: " << A.order_of_key(11) << endl; // 4
	cout << "No. of elems smaller than 1: " << A.order_of_key(1) << endl; // 0
	cout << endl;

	// lower bound -> Lower Bound of X = first element >= X in the set
	cout << "Lower Bound of 6: " << *A.lower_bound(6) << endl;
	cout << "Lower Bound of 2: " << *A.lower_bound(2) << endl;
	cout << endl;

	// Upper bound -> Upper Bound of X = first element > X in the set
	cout << "Upper Bound of 6: " << *A.upper_bound(6) << endl;
	cout << "Upper Bound of 1: " << *A.upper_bound(1) << endl;
	cout << endl;

	// // Remove elements - 2nd query
	A.erase(1);
	A.erase(11); // element that is not present is not affected

	// A contains
	cout << "A = ";
	for (auto i : A)
		cout << i << " ";
	cout << endl;

}


Link to utubevideo ---->https://www.youtube.com/watch?v=IWyIwLFucU4&list=PLAj_13N2fk-RRGEV9AQ1_TmuYt_48Q9RQ&index=15